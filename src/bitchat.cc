// This file is part of 'bitchat.desktop' 
// Copyright (c) 2025, Red Panda Software LLC, Pedro Vicente. All rights reserved.
// http://www.thesunroom.org/
// See file LICENSE for full license details.

#include "bitchat.hh"

extern void usage();

/////////////////////////////////////////////////////////////////////////////////////////////////////
// handle_command
/////////////////////////////////////////////////////////////////////////////////////////////////////

void handle_command(const std::string& command)
{
  std::vector<std::string> parts = split(command, ' ');
  if (parts.empty()) return;

  for (size_t idx = 0; idx < parts.size(); ++idx)
  {
    std::cout << parts[idx];
    if (idx < parts.size() - 1)
    {
      std::cout << " ";
    }
  }
  std::cout << std::endl;

  std::string cmd = parts[0];

  std::string name;

  /////////////////////////////////////////////////////////////////////////////////////////////////////
  // /j #channel
  /////////////////////////////////////////////////////////////////////////////////////////////////////

  if (cmd == "/j")
  {
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////
  // /m @name message
  /////////////////////////////////////////////////////////////////////////////////////////////////////

  else if (cmd == "/m" || cmd == "/msg")
  {
    if (parts.size() > 1)
    {
      name = parts[1];
      name = remove_at_prefix(name);
      std::cout << name;
    }
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////
  // /w
  /////////////////////////////////////////////////////////////////////////////////////////////////////

  else if (cmd == "/w")
  {
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////
  // /clear
  /////////////////////////////////////////////////////////////////////////////////////////////////////

  else if (cmd == "/clear")
  {
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////
  // /hug @name
  /////////////////////////////////////////////////////////////////////////////////////////////////////

  else if (cmd == "/hug")
  {

    if (parts.size() > 1)
    {
      name = parts[1];
      name = remove_at_prefix(name);
      std::cout << name;
    }
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////
  // /slap @name
  /////////////////////////////////////////////////////////////////////////////////////////////////////

  else if (cmd == "/slap")
  {
    if (parts.size() > 1)
    {
      name = parts[1];
      name = remove_at_prefix(name);
      std::cout << name;
    }
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////
  // /block @name
  /////////////////////////////////////////////////////////////////////////////////////////////////////

  else if (cmd == "/block")
  {
    if (parts.size() > 1)
    {
      name = parts[1];
      name = remove_at_prefix(name);
      std::cout << name;
    }
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////
  // /unblock @name
  /////////////////////////////////////////////////////////////////////////////////////////////////////

  else if (cmd == "/unblock")
  {
    if (parts.size() > 1)
    {
      name = parts[1];
      name = remove_at_prefix(name);
      std::cout << name;
    }
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////
  // /fav @name
  /////////////////////////////////////////////////////////////////////////////////////////////////////

  else if (cmd == "/fav")
  {
    if (parts.size() > 1)
    {
      name = parts[1];
      name = remove_at_prefix(name);
      std::cout << name;
    }
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////
  // /unfav @name
  /////////////////////////////////////////////////////////////////////////////////////////////////////

  else if (cmd == "/unfav")
  {
    if (parts.size() > 1)
    {
      name = parts[1];
      name = remove_at_prefix(name);
      std::cout << name;
    }
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////
  // unknown command
  /////////////////////////////////////////////////////////////////////////////////////////////////////

  else
  {
    usage();
  }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// split
// split a string into tokens using a delimiter
/////////////////////////////////////////////////////////////////////////////////////////////////////

std::vector<std::string> split(const std::string& str, char delimiter)
{
  std::vector<std::string> tokens;
  std::stringstream ss(str);
  std::string token;
  while (std::getline(ss, token, delimiter))
  {
    if (!token.empty())
    {
      tokens.push_back(token);
    }
  }
  return tokens;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// remove_at_prefix
// remove @ prefix
/////////////////////////////////////////////////////////////////////////////////////////////////////

std::string remove_at_prefix(const std::string& nickname)
{
  if (!nickname.empty() && nickname[0] == '@')
  {
    return nickname.substr(1);
  }
  return nickname;
}
